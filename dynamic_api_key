// SESSION HIJACKING PREVENTION BY DYNAMIC API SECRET KEY ACROSS ONE OR MULTIPLE CLIENTS

//                  SESSION INITIALIZATION REQUEST
//----->            CLIENT SECURE RANDOM (48 BYTES)
//----->    	 	HMAC512(input: original_secret_key, key: api_key)
//----->    	 	AES-CBC(input: client_created_secret_key, key: first_32_bytes_client_random, iv: next_16_bytes_client_random)
//AUTHORIZATION= 	SUMMATION OF THE TWO 64 bytes

//                  SESSION INITIALIZATION RESPONSE
//<-----            SERVER SECURE RANDOM (96 BYTES)
//<-----    		HMAC512(input: client_created_secret_key, key: api_key)
//<-----    		AES-CBC(input: server_created_secret_key, key: first_32_bytes_client_random, iv: secure_random)
//AUTHORIZATION= 	SUMMATION OF THE TWO 64 bytes

//                  SUBSEQUENT REQUESTS
//----->    		HMAC512(input: server_created_secret_key, key: api_key)
//----->    		AES-CBC(input: client_created_secret_key, key: first_32_bytes_client_random, iv: secure_random)
//AUTHORIZATION= 	SUMMATION OF THE TWO 64 bytes

//                  SUBSEQUENT RESPONSES
//<-----    		HMAC512(input: client_created_secret_key, key: api_key)
//<-----    		AES-CBC(input: server_created_secret_key, key: first_32_bytes_client_random, iv: secure_random)
//AUTHORIZATION= 	SUMMATION OF THE TWO 64 bytes

HMAC512 evaluates to a 64 byte hash as well as the AES-CBC ciphertext. By taking each value at the index of the 2 byte arrays and adding them as an unsigned 8 bit integer, you verify the previous key and new (current) key. The encrypted AES ciphertext cannot be evaluted without the hash of the previous key.
